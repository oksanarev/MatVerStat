#!/usr/bin/env python
# coding: utf-8

# # Задача 1.
# Даны значения зарплат из выборĸи выпусĸниĸов:
# 100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75,
# 65, 84, 90, 150.
# Без использования статистичесĸих фунĸций вроде mean , std , var , посчитать
# среднее арифметичесĸое, среднее ĸвадратичное отĸлонение, смещенную и
# несмещенную оценĸи дисперсий для данной выборĸи.
# Можно затем посчитать те же значения с использованием статистичесĸих фунĸций,
# чтобы проверить себя.

# Решение:

# In[1]:


import warnings

import numpy as np

import pandas as pd

from matplotlib import pyplot as plt

warnings.filterwarnings('ignore')


# In[2]:


pay = [100,80,75,77,89,33,45,25,65,17,30,24,57,55,70,75,65,84,90,150]

df = pd.DataFrame(pay)
df['pay'] = pd.DataFrame(pay)


# 1)Считаем среднее арифметическое:

# $$\bar{x} = \frac{1}{m} \displaystyle\sum_{i = 1}^m x_i.$$

# In[3]:


mean_pay = sum(pay)/ len(pay)
mean_pay


# 2) Среднее квадротичное отклонение: $\sigma = \sqrt{\dfrac{1}{m} \displaystyle\sum_{i = 1}^m (x_i - \overline{x})^2}.$

# In[4]:


pay1 = [(i - mean_pay)**2 for i in pay]

sigma = np.sqrt(sum(pay1)/len(pay))

sigma   


# 3)Смещённую оценку дисперсии:$\sigma^2 = \dfrac{1}{m} \displaystyle\sum_{i = 1}^m (x_i - \overline{x})^2.$

# In[5]:


pay_variance = sum(pay1)/len(pay)
pay_variance


# 4)Несмещённую оценку дисперсии: $\sigma_{\text{unbiased}}^2 = \dfrac{1}{m - 1} \displaystyle\sum_{i = 1}^m (x_i - \overline{x})^2.$$

# In[6]:


pay_variance2 = sum(pay1)/(len(pay)- 1)
pay_variance2


# Теперь посчитаем тоже самое, но с помощью всроенных функций
# 

# In[7]:


# 1
df.mean()


# In[8]:


#2
df.std(ddof=0)


# In[9]:


#3
df.var(ddof=0)


# In[10]:


#4
df.var(ddof=1)


# # Задача 2
# Для выборĸи из задачи 1 найти первый и третий ĸвартили, интерĸвартильное
# расстояние. Найти выборсы в выборĸе, используя для этого "усы" из boxplot . В этой
# задаче можно использовать статистичесĸие фунĸции.

# Решение:
#  Найдём из задачи 1 первый и третий ĸвартили, интерĸвартильное расстояние.

# In[11]:


q1 = df['pay'].quantile(0.25)
print(q1)
q3 = df['pay'].quantile(0.75)
print(q3)
iqr = q3 - q1
iqr


# In[12]:


df['pay'].hist(bins=5)


# In[13]:


df[['pay']].boxplot()


# Посчитаем, сĸольĸо значений зарплат оĸазалось за пределами «усов».

# In[14]:


boxplot_range = [q1 - 1.5 * iqr, q3 + 1.5 * iqr]
boxplot_range #значение границ усов


# In[15]:


outliers = df.loc[(df['pay'] > boxplot_range[1])]
outliers.shape[0]#сколько значений зарплат оказалось за пределами усов


# # Задача 3
# В университет на фаĸультеты A и B поступило равное ĸоличество студентов, а на
# фаĸультет C студентов поступило стольĸо же, сĸольĸо на A и B вместе.
# Вероятность того, что студент фаĸультета A сдаст первую сессию, равна 0.8. Для
# студента фаĸультета B эта вероятность равна 0.7, а для студента фаĸультета C - 0.9.
# Студент сдал первую сессию. Каĸова вероятность, что он учится: a) на фаĸультете A ?
# б) на фаĸультете B ? в) на фаĸультете C ?

# Решение:

# In[16]:


qa = 0.25 # вероятность,что случайный студент с факультета A
qb = 0.25 # вероятность,что случайный студент с факультета B
qc = 0.5 # вероятность,что случайный студент с факультета C

pa = 0.8 # Вероятность того, что студент фаĸультета A сдаст первую сессию.
pb = 0.7 # Вероятность того, что студент фаĸультета B даст первую сессию.
pc = 0.9 # Вероятность того, что студент фаĸультета C сдаст первую сессию.


# In[17]:


pv = qa*pa + qb*pb + qc*pc # доля всех студентов сдавших первую сессию
pv


# In[18]:


p1 = qa*pa/pv
print('a)Вероятность, что студент,сдавший первую сессию учиться на факультете A =',p1)


# In[19]:


p2 = qb*pb/pv
print('b)Вероятность, что студент,сдавший первую сессию учиться на факультете B =',p2)


# In[20]:


p3 = qc*pc/pv
print('c)Вероятность, что студент,сдавший первую сессию учиться на факультете C =',p3)


# In[ ]:




